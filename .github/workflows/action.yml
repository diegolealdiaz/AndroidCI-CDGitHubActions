# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "lint"
  lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3
        
#      # Runs a single command using the runners shell for archive permission gradlew execute
#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#
#      # Runs a single command using the runners shell for lint execute
#      - name: Run Lint
#        run: ./gradlew lint
#
#      # Runs a set of commands using the runners shell for archive html generate
#      - name: Upload html lint report
#        uses: actions/upload-artifact@v3
#        with:
#          name: lint.html
#          path: app/build/reports/lint-results-debug.html
          
  # This workflow contains a single job called "unit-test"
  unit-test:
    # Triggers the workflow on pipeline lint event
    needs: [lint]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3
        
#      # Runs a single command using the runners shell for archive permission gradlew execute
#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#
#      # Runs a single command using the runners shell for unit test execute
#      - name: Run Unit Test
#        run: ./gradlew test
#
#      # Runs a set of commands using the runners shell for archive html generate
#      - name: Upload html test report
#        uses: actions/upload-artifact@v3
#        if: success() || failure()
#        with:
#          name: unit_test_report
#          path: app/build/reports/tests/testDebugUnitTest/
        
        
      # This workflow contains a single job called "instrumentation-test"
  instrumentation-test:
    # Triggers the workflow on pipeline unit test event
    needs: [unit-test]
    # If Job unit-test is success
    if: ${{ success() }}
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3
        
#      # Runs a single command using the runners shell for archive permission gradlew execute
#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin' # See 'Supported distributions' for available options
#          java-version: '11'
#          cache: 'gradle'
#
#      # Runs a single command using the runners shell for instrumentation test execute
#      - name: Run Instrumentation Test
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: 29
#          script: ./gradlew connectedCheck --stacktrace
#
#      # Runs a set of commands using the runners shell for archive html generate
#      - name: Upload html test report
#        uses: actions/upload-artifact@v3
#        if: success() || failure()
#        with:
#          name: instrumentation_test_report
#          path: app/build/results/report/androidTest/connected/

  # This workflow contains a single job called "static-code-analysis"
  static-code-analysis:
    # Triggers the workflow on pipeline unit test event
    needs: [ instrumentation-test ]
    # If Job unit-test is success
    if: ${{ success() }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3

      # Runs a single command using the runners shell for archive permission gradlew execute
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'
          cache: 'gradle'

      # Runs a single command using the runners shell for static code analysis
#      - name: SonarCloud Scan
#        run: ./gradlew app_sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEB: ${{ secrets.SONAR_TOKEN }}
          
