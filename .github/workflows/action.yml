# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "lint"
  lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3
        
      # Runs a single command using the runners shell for archive permission gradlew execute
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Runs a single command using the runners shell for lint execute
      - name: Run Lint
        run: ./gradlew lint

      # Runs a set of commands using the runners shell for archive html generate
      - name: Upload html lint report
        uses: actions/upload-artifact@v3
        with:
          name: lint.html
          path: app/build/reports/lint-results-debug.html
          
  # This workflow contains a single job called "unit-test"
  unit-test:
    # Triggers the workflow on pipeline lint event
    needs: [lint]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3
        
      # Runs a single command using the runners shell for archive permission gradlew execute
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Runs a single command using the runners shell for unit test execute
      - name: Run Unit Test
        run: ./gradlew test

      # Runs a set of commands using the runners shell for archive html generate
      - name: Upload html test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: unit_test_report
          path: app/build/reports/tests/testDebugUnitTest/
        
        
  # This workflow contains a single job called "instrumentation-test"
  instrumentation-test:
    # Triggers the workflow on pipeline unit test event
    needs: [unit-test]
    # If Job unit-test is success
    if: ${{ success() }}
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3
        
      # Runs a single command using the runners shell for archive permission gradlew execute
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'
          cache: 'gradle'

      # Runs a single command using the runners shell for instrumentation test execute
      - name: Run Instrumentation Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck --stacktrace

      # Runs a set of commands using the runners shell for archive html generate
      - name: Upload html test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: instrumentation_test_report
          path: app/build/results/report/androidTest/connected/

  # This workflow contains a single job called "static-code-analysis"
  static-code-analysis:
    # Triggers the workflow on pipeline unit test event
    needs: [ instrumentation-test ]
    # If Job unit-test is success
    if: ${{ success() }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v3

      # Runs a single command using the runners shell for archive permission gradlew execute
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'
          cache: 'gradle'

      # Runs a single command using the runners shell for static code analysis
      - name: SonarCloud Scan
        run: ./gradlew app:sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # This workflow contains a single job called "apk-debug"
  apk-debug:
    # Triggers the workflow on pipeline unit test event
    needs: [ static-code-analysis ]
    # If Job static-code-analysis is success
    if: ${{ success() }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      # Runs a single command using the runners shell for download package information from all sources
      - name: Sudo update package info
        run: sudo apt-get -y update
        shell: bash

      # Runs a single command using the runners shell for download package jdk java 11
      - name: Sudo install JDK 11
        run: sudo apt-get -y install openjdk-11-jdk
        shell: bash

      # Runs a single command using the runners shell for copy key file path
      - name: Copy he key file to the signing key file
        run: cp ${{ secrets.SIGNING_KEY }} $GITHUB_WORKSPACE/signing-key.jks
        shell: bash

      # Runs a single command using the runners shell for create apk debug
      - name: Create APK debug
        shell: bash
        run: |
          chmod +x ./gradlew
          ./gradlew build
          ./gradlew assembleDebug \
            -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/signing-key.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.KEY_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      # Runs a single command using the runners shell for delete key file path
      - name: Delete key file
        run: rm $GITHUB_WORKSPACE/signing-key.jks
        shell: bash

      # Runs a set of commands using the runners shell for archive apk generate
      - uses: actions/upload-artifact@master
        with:
          name: debug
          path: app/build/outputs/apk/debug/

